🚀 PHP Roadmap: Zero to Hero

✅ Level 0: Setup & Basics

1. Install XAMPP or Local Server

Download XAMPP and install it.

Open XAMPP Control Panel and start Apache and MySQL.

Save your PHP files in:
C:\xampp\htdocs\your-folder\file.php

Access in browser via:
http://localhost/your-folder/file.php

✅ Level 1: Basic PHP Syntax

<?php
echo "Hello, World!";
?>

✅ Try this:

Create a file index.php

Paste the above code

Run it on http://localhost/your-folder/index.php

✅ Level 2: Variables & Data Types

<?php
$name = "Atik";
$age = 22;
$height = 5.9;
$is_coder = true;

echo "My name is $name and I am $age years old.";
?>

PHP Data Types:

string, int, float, bool, array, object, null

✅ Level 3: Conditions & Loops

<?php
$score = 85;

if ($score >= 90) {
  echo "A+";
} elseif ($score >= 80) {
  echo "A";
} else {
  echo "Below A";
}

// Loop
for ($i = 1; $i <= 5; $i++) {
  echo "Number: $i <br>";
}
?>
✅ Level 4: Functions

<?php
function greet($name) {
  return "Hello, $name!";
}

echo greet("Atik");
?>


---

✅ Level 5: Arrays

<?php
$fruits = ["Apple", "Banana", "Mango"];
echo $fruits[1]; // Banana

foreach ($fruits as $fruit) {
  echo "$fruit <br>";
}
?>
✅ Level 6: Forms & POST/GET

Create an HTML form:

<form action="form-handler.php" method="POST">
  <input type="text" name="username" />
  <input type="submit" />
</form>

Handle it in PHP (form-handler.php):

<?php
$name = $_POST["username"];
echo "Hello, $name!";
?>
✅ Level 7: PHP + MySQL (CRUD)

Connect to MySQL


$conn = new mysqli("localhost", "root", "", "test_db");
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

Create, Read, Update, Delete (CRUD operations)



---

✅ Level 8: WordPress Theme/Plugin Development

Once you know PHP basics:

Learn WordPress file structure

Create custom themes

Build basic plugins using hooks & filters

✅ Lesson 1: Setup & "Hello, World!" in PHP

🖥️ Step 1: Install XAMPP (if not already done)

1. Go to: https://www.apachefriends.org/index.html


2. Download XAMPP for Windows/Linux/Mac


3. Install it on your computer.




---

🔧 Step 2: Start the Server

1. Open XAMPP Control Panel


2. Click Start on both:

Apache (for running PHP)

MySQL (for database, later)

📁 Step 3: Create Your First PHP File

1. Go to:
C:\xampp\htdocs\ (Windows)
or
/Applications/XAMPP/htdocs/ (Mac)


2. Create a new folder, e.g., php-lessons


3. Inside that folder, create a file named:
index.php




---

✍️ Step 4: Write Your First PHP Code

Open index.php in any code editor (VS Code, Notepad++), and paste this:

<?php
echo "👋 Hello, World! I'm learning PHP!";
🌐 Step 5: Run It in Your Browser

1. Open your browser


2. Visit:
http://localhost/php-lessons/index.php



You should see:

👋 Hello, World! I'm learning PHP!


---

✅ What You Learned:

How to install and run PHP locally

What a PHP file looks like

How to output text using echo

✅ Lesson 2: PHP Variables & Data Types

📦 What is a Variable?

A variable is used to store data (like a name, number, etc.) so you can use it later.

In PHP, you define a variable with a $ sign:

<?php
$name = "Atik";
$age = 22;
$height = 5.8;
$is_student = true;

echo "My name is $name and I am $age years old.";
?>
🧪 PHP Data Types:

Type	Example	Description

string	"Atik"	Text values
int	22	Whole numbers
float	5.8	Decimal numbers
bool	true, false	Yes/No values
array	["apple", "banana"]	List of items
null	null	Empty or no value
✅ Example: Display All Types

<?php
$name = "Atik";         // string
$age = 22;              // int
$height = 5.8;          // float
$is_coder = true;       // bool
$skills = ["HTML", "CSS", "PHP"]; // array
$job = null;            // null

echo "Name: $name <br>";
echo "Age: $age <br>";
echo "Height: $height <br>";
echo "Is a coder? " . ($is_coder ? "Yes" : "No") . "<br>";
echo "First skill: " . $skills[0] . "<br>";
echo "Job: " . $job . "<br>";
?>

> 🔍 ($is_coder ? "Yes" : "No") is a ternary operator, used to write simple if-else conditions in one line.


✅ Lesson 3: Conditions & Loops in PHP

🔹 1. Conditional Statements (if, else, elseif)

➤ Example 1: Grading System

<?php
$score = 87;

if ($score >= 90) {
    echo "Grade: A+";
} elseif ($score >= 80) {
    echo "Grade: A";
} elseif ($score >= 70) {
    echo "Grade: B";
} else {
    echo "Grade: Fail";
}
?>

🧠 Explanation:

PHP checks conditions top to bottom.

As soon as one is true, it runs that block and skips the rest.
🔹 2. Comparison Operators

Operator	Meaning	Example ($a = 5, $b = 3)

==	Equal to	$a == $b → false
!=	Not equal	$a != $b → true
>	Greater than	$a > $b → true
<	Less than	$a < $b → false
>=	Greater or equal	$a >= 5 → true
<=	Less or equal	$a <= 3 → false
🔄 3. Loops (for, while, foreach)

➤ Example 2: for Loop (Print 1 to 5)

<?php
for ($i = 1; $i <= 5; $i++) {
    echo "Number: $i <br>";
}
?>

➤ Example 3: while Loop

<?php
$x = 1;
while ($x <= 3) {
    echo "x = $x <br>";
    $x++;
}
?>

➤ Example 4: foreach Loop (Array)

<?php
$fruits = ["Apple", "Banana", "Mango"];

foreach ($fruits as $fruit) {
    echo "Fruit: $fruit <br>";
}
?>
✅ Lesson 4: Functions in PHP

🔹 What is a Function?

A function is a reusable block of code that performs a specific task.


---

✍️ How to Write a Function in PHP

<?php
function greet() {
  echo "Hello from a function!";
}

greet(); // Call the function
?>
🔹 Function with Parameters

<?php
function greetUser($name) {
  echo "Hello, $name!";
}

greetUser("Atik"); // Output: Hello, Atik!
?>

You can pass multiple parameters:

<?php
function add($a, $b) {
  echo $a + $b;
}
🔹 Function with Return Value

<?php
function multiply($x, $y) {
  return $x * $y;
}

$result = multiply(4, 6);
echo "Result: $result"; // Output: Result: 24
?>


---

🔹 Default Parameters

<?php
function welcome($name = "Guest") {
  echo "Welcome, $name!";
}

welcome();         // Output: Welcome, Guest!
welcome("Atik");   // Output: Welcome, Atik!
?>

✅ Lesson 5: Arrays in PHP

Arrays let you store multiple values in a single variable.


---

🔹 1. Indexed Arrays (like a list)

<?php
$colors = ["Red", "Green", "Blue"];

echo $colors[0]; // Red

foreach ($colors as $color) {
    echo "$color <br>";
}
?>
🔹 2. Associative Arrays (like a dictionary)

These use named keys.

<?php
$person = [
    "name" => "Atik",
    "age" => 22,
    "country" => "Bangladesh"
];

echo $person["name"]; // Atik

foreach ($person as $key => $value) {
    echo "$key: $value <br>";
}
?
🔹 3. Multidimensional Arrays

Arrays inside arrays.

<?php
$users = [
    ["name" => "Atik", "age" => 22],
    ["name" => "Sara", "age" => 25]
];

echo $users[1]["name"]; // Sara

foreach ($users as $user) {
    echo "Name: " . $user["name"] . ", Age: " . $user["age"] . "<br>";
}
?>
🔧 Common Array Functions

Function	Use

count($arr)	Count items in array
array_push()	Add item to end
array_pop()	Remove last item
in_array()	Check if value exists
array_keys()	Get all keys in assoc array


<?php
$skills = ["HTML", "CSS", "PHP"];
array_push($skills, "JavaScript");

if (in_array("PHP", $skills)) {
    echo "You know PHP!";
}
?>
✅ Lesson 6: Forms, GET & POST in PHP

Forms allow users to submit data to your PHP script. You can collect this data using $_GET or $_POST.


---

🔹 Step 1: Create an HTML Form

Save this as form.html inside your XAMPP htdocs folder:

<form action="form-handler.php" method="POST">
  <label>Your Name:</label>
  <input type="text" name="username" />
  <input type="submit" value="Submit" />
</form>

action="form-handler.php" → this is where the form data goes

method="POST" → use POST to send form data securely
🔹 Step 2: Handle the Form with PHP

Create a file named form-handler.php in the same folder:

<?php
$name = $_POST["username"];  // Gets the input from form

echo "Welcome, $name!";
?>
🟡 $_GET vs $_POST

Type	When to Use	Example

GET	When sending visible data	form-handler.php?name=Atik
POST	When sending hidden/secure data	Used in login forms, user input



---

🔹 Example: GET Form

<form action="form-handler.php" method="GET">
  <input type="text" name="city" />
  <input type="submit" value="Submit" />
</form>

<?php
$city = $_GET["city"];
echo "You live in $city";
?>
✅ Lesson 7: PHP + MySQL (Database Integration)

This is where PHP becomes truly powerful—you'll learn how to connect your PHP code to a database, insert data, and retrieve it.


---

🔹 Step 1: Create a Database using phpMyAdmin

1. Go to: http://localhost/phpmyadmin


2. Click “New” in the sidebar


3. Name your database: php_tutorial


4. Click “Create”
🔹 Step 2: Create a Table

Inside the php_tutorial database:

1. Create a table named users


2. Add these columns:

id – INT, Auto Increment, Primary Key

name – VARCHAR(100)

email – VARCHAR(100)
🔹 Step 3: Connect PHP to MySQL

Create a file connect.php:

<?php
$host = "localhost";
$user = "root";
$pass = "";
$db   = "php_tutorial";

$conn = new mysqli($host, $user, $pass, $db);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>
🔹 Step 4: Insert Data into Database

<?php
include "connect.php";

$name = "Atik";
$email = "atik@example.com";

$sql = "INSERT INTO users (name, email) VALUES ('$name', '$email')";

if ($conn->query($sql) === TRUE) {
    echo "User added successfully!";
} else {
    echo "Error: " . $conn->error;
}
?>

✅ You should see "User added successfully!" in your browser
🔍 Check your users table in phpMyAdmin to confirm the data is saved.
🔹 Step 5: Display Data from Database

<?php
include "connect.php";

$result = $conn->query("SELECT * FROM users");

while ($row = $result->fetch_assoc()) {
    echo "Name: " . $row["name"] . " - Email: " . $row["email"] . "<br>";
}
?>
✅ Lesson 8: WordPress Theme & Plugin Basics with PHP

Since your goal is to become a WordPress developer, you’ll now learn how PHP powers themes and plugins inside WordPress.


---

🧱 What is WordPress Built On?

Core language: PHP

Database: MySQL

Frontend: HTML, CSS, JS

Structure: Uses themes, plugins, and the WordPress core



---

🔸 A. WordPress Theme Basics

🗂️ Theme Folder Structure:

Example structure inside /wp-content/themes/your-theme-name/:

your-theme/
├── style.css         ← required
├── index.php         ← required
├── header.php
├── footer.php
├── functions.php
├── page.php
├── single.php
📝 1. style.css (Theme Declaration)

/*
Theme Name: Atik's First Theme
Author: Atik Al Mahmud
Description: A custom theme built from scratch.
Version: 1.0
*/
🧠 2. index.php (Main template)

<?php get_header(); ?>

<h1>Welcome to my custom theme</h1>

<?php get_footer(); ?>
🔧 3. functions.php (Register features)

<?php
function atik_theme_setup() {
    add_theme_support('title-tag');
    add_theme_support('post-thumbnails');
}
add_action('after_setup_theme', 'atik_theme_setup');
?>
✅ Activate the Theme:

Zip your theme folder

Upload it via Appearance > Themes > Add New > Upload

Or place it inside /wp-content/themes/ manually and activate it
🔸 B. WordPress Plugin Basics

📂 Plugin Folder Structure

Inside /wp-content/plugins/atik-plugin/, create:

atik-plugin/
└── atik-plugin.php
